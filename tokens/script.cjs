const fs = require("fs");

const NAMESPACE = "org.twigma";
const PRIMITIVE_COLLECTION = "@primitive_color";
const SEMANTIC_COLLECTION = "@semantic_color";
const JOIN_CHAR = "_";
const SEMANTIC_MODES = { light: "day", dark: "night" };

const data = JSON.parse(fs.readFileSync("./tokens/tokens.twigma.json"));

const processed = {
  color: { primitive: {}, semantic: {} },
  size: { primitive: {}, semantic: {} },
};
processCollection(data, "@primitive_color", "@semantic_color", processed.color);
processCollection(data, "@primitive_size", "@semantic_size", processed.size);

function processCollection(data, primitiveKey, semanticKey, processed) {
  traverse(processed.primitive, data[primitiveKey], primitiveKey, semanticKey);
  traverse(processed.semantic, data[semanticKey], primitiveKey, semanticKey);
}

const _atPropertyString = `/* Size @property definitions */
${drawCSSPropDefinition(processed.size.primitive.default)}

/* Color @property definitions */
${drawCSSPropDefinition(processed.color.primitive.default)}`;

const fileString = `
/* 
 * This file is automatically generated by tokens/script.cjs! 
 */

:root {
  /* Size Primitive */
${drawCSSPropLines(processed.size.primitive.default, "  ")};

  /* Color Primitive */
${drawCSSPropLines(processed.color.primitive.default, "  ")};

  /* Size Semantic */
${drawCSSPropLines(processed.size.semantic.default, "  ")};

  /* Color Default Values (Light Mode) */
${drawCSSPropLines(processed.color.semantic[SEMANTIC_MODES.light], "  ")};
}

/* Color Dark Mode */
@media (prefers-color-scheme: dark) {
  :root {
${drawCSSPropLines(processed.color.semantic[SEMANTIC_MODES.dark], "    ")};
  }
}
`;

function drawCSSPropDefinition(lines) {
  return lines
    .sort()
    .map(
      (l) => `@property ${l.property} {
  syntax: "<${l.type}>";
  inherits: true;
}`
    )
    .join("\n");
}

function drawCSSPropLines(lines, indent = "  ") {
  return lines
    .sort((a, b) => (a.property > b.property ? 1 : -1))
    .map((l) => `${indent}${l.property}: ${l.value}`)
    .join(";\n");
}

fs.writeFileSync("src/tokens.css", fileString);

// assumes everything is a color.
function traverse(
  definitions,
  object,
  primitiveKey,
  semanticKey,
  currentType = "",
  keys = []
) {
  const property = `--${keys.join("-")}`;
  const type = object.$type || currentType;
  if ("$value" in object) {
    if ("$extensions" in object && NAMESPACE in object.$extensions) {
      for (let mode in object.$extensions[NAMESPACE].modes) {
        definitions[mode] = definitions[mode] || [];
        definitions[mode].push({
          property,
          value: valueToCSS(
            object.$extensions[NAMESPACE].modes[mode],
            primitiveKey,
            semanticKey
          ),
          type,
        });
      }
    } else {
      const mode = "default";
      definitions[mode] = definitions[mode] || [];
      definitions[mode].push({
        property,
        value: valueToCSS(object.$value, primitiveKey, semanticKey),
        type,
      });
    }
  } else {
    Object.entries(object).forEach(([key, value]) => {
      if (key.charAt(0) !== "$") {
        traverse(definitions, value, primitiveKey, semanticKey, type, [
          ...keys,
          key,
        ]);
      }
    });
  }
}

function valueToCSS(value, primitiveKey, semanticKey) {
  if (value.toString().charAt(0) === "{")
    return `var(--${value
      .replace(`${primitiveKey}${JOIN_CHAR}`, "")
      .replace(`${semanticKey}${JOIN_CHAR}`, "")
      .replace(/\./g, "-")
      .replace(/^\{/, "")
      .replace(/\}$/, "")})`;
  return value.toString().match(/^\d+$/) ? `${value}px` : value;
}
